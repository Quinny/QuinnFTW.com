[



































































  
    
    {
      "title": "A non-scary C++ Bloom Filter Implementation",
      "permalink": "http://quinnftw.com/c++-bloom-filter/",
      "link": "http://quinnftw.com/c++-bloom-filter/",
      "date": "2016-10-16T00:00:00-04:00",
      
        "modified": "2016-10-16T15:02:53-04:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "A bloom filter is a space efficient data structure which answers the question of\n“Do you contain this element?” with either “Maybe” or “Definitely not”.  Bloom\nfilters trade-off the total confidence of a typical hash set with a huge reduction\nin memory.\n\nHow do they work?\n\nUnder the hood a bloom filter is just an array of bits.  Initially, all bits are set to 0.\nWhen an item is inserted, it is hashed with K different hash functions.\nThese hash functions provide K indices into the bit array, which are\nall flipped from 0 to 1.\n\n\n\n\n  Inserting “Cat” and “Dog” into a bloom filter with K=2 different\nhash functions.\n\n\nIt then follows that an item is “Maybe” in the bloom filter if for each of\nits hash indices, the corresponding bit is set to 1.  Why only maybe?  There is\nno such thing as the “perfect” hash function, consequently collisions introduce\na probability for error.\n\n\n\n\n  “Bird” collides with other entries.  This means that the Bloom filter\nwould identify “Bird” as maybe being a member of the set, when in reality it’s\nnot.\n\n\nThe upside is that if any of the hash indices are 0 for a given\nelement, we can be 100% confident that element is not in the set.  This means\nthat Bloom filters can produce false positives but never\nfalse negatives.\n\nMemory Savings v.s. a Typical Hash Set\n\nBeware, sketchy math ahead\n\nThere is some fancy math on the wikipedia\npage that states fewer than 10 bits per item is required for a 1% false\npositive rate.  Lets assume we want to store 1,000,000 ASCII strings with an\naverage length of 10 characters.\n\nFor a bloom filter this would require:\n\n10 bits per element\n10,000,000 bits\n\nTotal size\n1.19MB\n\n\n\nNote that the actual size of the data does not influence the size of the table.\n\nFor a hash set with an 80% occupancy rate this would require:\n\n\n1,200,000 32 bit pointers\n38,400,000 bits\n\n\n1,000,000 32 bit hash values32,000,000 bits\n\n1,000,000 10 byte strings for collision checking\n80,000,000 bits\n\n\nTotal size\n18.75MB\n\n\n\nThe space savings are pretty large if you can afford a 1% margin for error.\n\nImplementation\n\nBloom filters are pretty straight forward, the one catch is: Where the hell\ndo we get all these hash functions?  In practise it is not feasible to have to\nwrite K hash functions for some potentially large K value.\nA commonly used trick is to use a single hash function, and seed a uniform random\ngenerator with the output.  This generator can then be used to compute each of the K\n“hash values.”\n\n\n\nPractical Applications\n\n\n  Yahoo email contact check\n  Malicious website verification\n\n",
      "excerpt": "A bloom filter is a space efficient data structure which answers the question of\n“Do you contain this element?” with either “Maybe” or “Definitely not”.  Bloom\nfilters trade-off the total confidence of a typical hash set with a huge reduction\nin memory.\n\n",
      "languages": null,
      "categories": ["not-scary"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "IPD Research Paper",
      "permalink": "http://quinnftw.com/ipd-research-paper/",
      "link": "http://quinnftw.com/ipd-research-paper/",
      "date": "2016-03-23T00:00:00-04:00",
      
        "modified": "2016-03-23T09:31:03-04:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "\n",
      "excerpt": "\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  

  
    ,
    {
      "title": "A non-scary C++ signals and slots implementation",
      "permalink": "http://quinnftw.com/c++-signals-and-slots/",
      "link": "http://quinnftw.com/c++-signals-and-slots/",
      "date": "2016-02-15T00:00:00-05:00",
      
        "modified": "2016-10-16T10:48:23-04:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "I was reading hacker news not too long ago and came across a c++ signals\nand slots implementation.  It was\nvery clearly implemented pre-c++11, and is pretty difficult to read.  I thought\nI would try my hand at coming up with something a little more modern, taking\nadvantage of std::function.\n\nSignals and slots\n\nSignals and slots is a common way of implementing the observer pattern while\navoiding messy boiler plate code and forced inheritance.  The idea is that \nthe observable objects can send signals to callable objects (slots).  It is\ncommonly used in GUI programming for handling events such as mouse clicks, button\npresses, etc. but is also useful in other environments such as asynchronous message\npassing.\n\nDesigning the components\n\nThe slot\n\nThe first thing that needed to be done was to implement the type that would be receiving\nthe signals.  The number one goal here was strong typed-ness.  I really wanted\nto avoid going the java route where the observer receiving function just takes\nin an Object and leaves it up to the handler to cast it into something usable. \nI personally find that choice to be super hacky.\n\nThankfully C++ provides a std::function type which allows for template parameters\nand will type check at compile time.  The signal receiver type can then be a \nspecialization of std::function in which the return type is always void, and \naccepts a variable number of input parameter types.  I called it delegate\n(inspired by the c# type) and defined it as:\n\ntemplate &lt;typename ...Args&gt;\nusing delegate = std::function&lt;void(Args...)&gt;;\n\nThe nice thing about std::function is that it can accept any callable\nobject including lambdas and functors (callable objects).\n\nThe signal\n\nNow that the slot is done, the signal type is trivial.  We simply need\nto maintain a list of slots, and expose an interface for registering new slots\nand sending messages to them.\n\ntemplate &lt;typename ...Args&gt;\nclass signal {\nprivate:\n    using fn_t = delegate&lt;Args...&gt;;\n    std::vector&lt;fn_t&gt; observers;\n\npublic:\n    void connect(fn_t f) {\n        observers.push_back(f);\n    }\n\n    void operator ()(Args... a) {\n        for (auto i: observers)\n            i(a...);\n    }\n};\n\nYou can now embed this signal type inside of GUI components, pass it as an \nasynchronous callback, etc. without having to worry about any kind of boilerplate\nor inheritance.  You also avoid having to perform any cast or type checking operations\ninside the slot.\nAn example usage of this code in a GUI setting follows.\n\n#include \"signal.h\"\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nstruct button {\n    qp::signal&lt;std::string&gt; update;\n\n    void click() {\n        update(\"clicked!\");\n    }\n};\n\nstruct label {\n    std::string text;\n    void changeText(std::string s) {\n        text = s;\n        std::cout &lt;&lt; s &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    using namespace std::placeholders;\n\n    label label1;\n    label label2;\n\n    button button1;\n    button1\n        .update\n        .connect(std::bind(&amp;label::changeText, std::ref(label1), _1));\n    // or\n    // button1.update.connect([&amp;](std::string s) { label1.changeText(s); });\n    button1\n        .update\n        .connect(std::bind(&amp;label::changeText, std::ref(label2), _1));\n\n    button1.click();\n    return 0;\n}\n\nFull Code\n",
      "excerpt": "I was reading hacker news not too long ago and came across a c++ signals\nand slots implementation.  It was\nvery clearly implemented pre-c++11, and is pretty difficult to read.  I thought\nI would try my hand at coming up with something a little more modern, taking\nadvantage of std::function.\n\n",
      "languages": null,
      "categories": ["not-scary"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Problem of the week",
      "permalink": "http://quinnftw.com/problem-of-the-week/",
      "link": "http://quinnftw.com/problem-of-the-week/",
      "date": "2016-02-12T00:00:00-05:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "\n",
      "excerpt": "\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  

  
    ,
    {
      "title": "A non-scary C++ trie implementation",
      "permalink": "http://quinnftw.com/c++-trie/",
      "link": "http://quinnftw.com/c++-trie/",
      "date": "2015-10-30T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "Tries are a lesser known, but very useful data structure.  A trie (or prefix tree)\nis an ordered tree data structure, such that each descendant of a given node in a trie share\na common prefix.  This property makes for fast prefix based queries (used in auto complete, spell check, etc.).\n\n\n\n\n  A trie with words a, at, ate, on, one, out, my, me, and mud.\nFilled in nodes denote the end of a word.\n\n\nImplementing a trie is similar to implementing any other n-ary tree, with a few key differences.\n\nThe Node\n\nEach node in a trie has a set of outgoing edges labeled by a character.  Each\nnode must also contain a flag indicating whether it is a valid word end.\n\nOutgoing edges can be represented by a map of char =&gt; node*.\n\nn[c] =&gt; m denotes that n has an outgoing edge labeled c, incident on m.\n\nThe end of word marker can be represented trivially by a boolean field.\n\nOur node ends up looking like this:\n\n\nThe Trie\n\nAs with most tree-like structures, the only data member required for a trie\nis a node which points to the root.\n\nTo insert into a trie, you simply iterate through the input string and walk the corresponding edge labels.\nIf a given edge does not exist, create it.  Once you have exhausted the input string, mark the node\nyou ended on as a valid end of word.\n\n\n\nSince trie_nodes are being dynamically allocated on the heap, they must be deleted.\nThe destructor for a trie needs to walk the tree and de-allocate all nodes.\nThis can be implemented using either a DFS or BFS traversal (I tend to prefer BFS)\n\n\n\nWith these functions, you have a working trie.  You can now begin to add functions\nwhich perform the prefix queries.  I have shown an example below.\n\nAuto complete\n\n\n\n",
      "excerpt": "Tries are a lesser known, but very useful data structure.  A trie (or prefix tree)\nis an ordered tree data structure, such that each descendant of a given node in a trie share\na common prefix.  This property makes for fast prefix based queries (used in auto complete, spell check, etc.).\n\n",
      "languages": null,
      "categories": ["not-scary"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Event Planning",
      "permalink": "http://quinnftw.com/margare_t/",
      "link": "http://quinnftw.com/margare_t/",
      "date": "2015-10-21T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "View Problem\n\nThe Problem\n\nGiven a set of events, each of which having 0 or more prerequisite events,\noutput a suggested ordering such that all of a given events pre-requisites appear before it.\n\nData Representation\n\n\n  Not super intuitive, but a directed graph works very well for this problem\n    \n      Directed meaning that edges are not bidirectional\n    \n  \n  Each event represents a node in the graph\n  An edge going from event A to event B denotes that A is a pre-requisite of B\n\n\n\n\nBuilding the graph\n\n\n  We can use a graph structure similar to that in week 2, with a few minor modifications (seen later)\n  A full description of this structure can be found here\n  Simply read in the end points and connect them on the graph\n\n\nBase Graph (without modifications)\n\n\n\nAlgorithm for generating sequence\n\n\n  There is a well known algorithm for sorting graph nodes based on pre-requisites\n  Known as topological sort\n    \n      Produces a linear ordering of vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering\n    \n  \n  Note that this is only possible if the given graph is a DAG (directed acyclic graph)\n  Also note that more than 1 valid topological sort may exist for a given DAG\n\n\nThe Algorithm\n\n\n  The first step is to find all events with no pre-requisites, these will always come first in the ordering\n  \n\n\nThe Algorithm\n\n\n  We add these events to a queue to be processed, and begin a loop while the queue is not empty\n  For each iteration, we pop an element off the queue, and disconnect it from its children\n    \n      The reason for this is because it has already been processed, so we are “fulfilling” the pre-requisite\n    \n  \n\n\nThe Algorithm\n\n\n\nThe Algorithm\n\n\n  We then check if this disconnecting has caused any nodes to have fulfilled pre-requisites\n  \n\n\nThe Algorithm\n\n\n  Continue this way until we have processed every node in the graph\n  At this point we have our ordering\n  Our base graph class just needs a way of checking how many incoming edges each \nnode has and we can implement this algorithm\n\n\nModifications\n\n\n\nThe Solution\n\n\n  here\n\n\nQuestions?\n",
      "excerpt": "View Problem\n\n",
      "languages": null,
      "categories": ["potw"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "POTW API",
      "permalink": "http://quinnftw.com/potw-api/",
      "link": "http://quinnftw.com/potw-api/",
      "date": "2015-10-15T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "View problem\n\nThe Problem\n\nGiven an endpoint for a JSON API, pull the data from it and translate it into \na graph.\n\nWhat is an API?\n\n\n  API stands for Application programming interface\n  Basically an API is an interface that a system can expose that allows \nothers to access some chosen internal data/functions\n  For example, you may create a stack class and expose an API for pushing and \npopping, but still hide away your internal node structure\n  potw.quinnftw.com/api/solvers exposes \na view of the websites internal scoring system\n\n\nHow do we use it?\n\n\n  We can get the data from the API using an HTTP GET request\n    \n      Called a GET request because it is used to retrieve data\n      POST, PATCH, and DELETE are also types of requests (self explanitory)\n    \n  \n  Almost every language has a library for making GET requests\n  Simply make a request to the URL and you will recieve the data displayed on the page\n\n\nParsing the data\n\n\n  The data is displayed in JSON format\n    \n      JSON stands for Javascript Object Notation\n      The format in which javascript serializes its objects\n    \n  \n  Again, most languages have a JSON parser in the standard library\n  I choose to use Javascript so that there would be a direct native translation\n\n\nMaking a request in Javascript\n\n\n  Making GET requests in node.js is very simple\n  Key concept to remember is that all I/O (file, keyboard, network, etc.) in node.js\nis asynchronous\n    \n      This means that it is non-blocking\n      i.e. program continues execution normally after function is called\n      I/O is performed concurrently\n    \n  \n\n\nDealing with asynchronous I/O\n\n\n  I/O in node.js uses callbacks to communicate data between concurrent functions\n  A callback is a function which is defined in the main execution space, and \nis passed to an asynchronous call as a means of returning the data\n  Simple return statements are useless since execution is asynchronous\n    \n      We can’t “wait” for a return value because functions do not block\n    \n  \n\n\n\n\nThe code\n\n\n\nExplained\n\n\n  This code allows us to make our request to the server asynchronously\n  We provide a callback function drawGraph so that we can use the data received\nin the I/O call\n\n\nUsing the data to draw a graph\n\n\n  Solution here\n\n\nQuestions?\n",
      "excerpt": "View problem\n\n",
      "languages": null,
      "categories": ["potw"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "A non-scary C++ graph implementation",
      "permalink": "http://quinnftw.com/c++-graph-implementation/",
      "link": "http://quinnftw.com/c++-graph-implementation/",
      "date": "2015-10-04T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "If you have ever tried to google for a C++ graph implementation you mostly likely \ncame across a big heaping (pun intended) mess of pointers.  While this approach \nworks fine, the code is very clunky and the interface tends to become awkward \nto use.\n\nThe problem with these implementations is that they do not make use of the excellent \ndata structures that the C++ STL provides.  Why define everything in a low level \nmanner when we can abstract all of it away with permformant higher level data structures?\n\nAt the highest level, a graph is a set of nodes connected by a set of edges.  The most \ncommon way to represent this relation is by using an adjacency matrix like so:\n\n\n\nEach node in the graph has its own row and column in the matrix.\n\n\n  m[i][j] = 1 =&gt; i is connected to j\n  m[i][j] = 0 =&gt; i is not connected to j\n\n\nThis idea can be simplified further by saying that each node has a set of adjacent \nnodes that it is connected to, i.e.\n\n i is adjacent to j\n\nSo the adjaceny matrix above could be reduced to the following:\n\n\n{\n    A : {B, C, D, E},\n    B : {A, D, E},\n    C : {A, F},\n    D : {A, B, F},\n    E : {A, B, F},\n    F : {C, D, E}\n}\n\n\nEssentially we have created a map, where the key is a node and the value is a set of nodes.\nThe relationship that the map represents is adjacency.  C++ provides both a set and a map \ndata structure, so this could be represented as follows:\n\n\nstd::map&lt;T, std::set&lt;T&gt;&gt; g;\n\n\nWhere T is the node payload type.  In order to connect node i to node j, \nwe simply add j to i’s set (and vice versa if the graph is bidirectional).\n\n\ng[i].insert(j);\n\n\nTo disconnect nodes i and j, simply remove j from i’s set\n\n\ng[i].erase(j);\n\n\nThe full code for this representation is about 16 lines, and is enough to implement \nalmost any graph algorithm (small modifications/additions must be made for some \nof the more complicated algorithms).\n\n\n\nUsage Example\n\nBreadth First Search\n\n\n\n",
      "excerpt": "If you have ever tried to google for a C++ graph implementation you mostly likely \ncame across a big heaping (pun intended) mess of pointers.  While this approach \nworks fine, the code is very clunky and the interface tends to become awkward \nto use.\n\n",
      "languages": null,
      "categories": ["not-scary"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Farmer Kelly",
      "permalink": "http://quinnftw.com/farmer-kelly/",
      "link": "http://quinnftw.com/farmer-kelly/",
      "date": "2015-10-02T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "View problem\n\nThe Problem\n\nGiven an m x n matrix of integers, find the sub rectangle such that the sum is maximized.\n\nExample\n\n\nThings to consider\n\n\n  Negative values may appear in the matrix\n    \n      If all values were positive the maximum sum sub rectangle would be the entire matrix\n    \n  \n  There is a better solution than checking every sub rectangle\n\n\nData representation\n\n\n  Nothing overly complicated needed\n  A 2D array will represent the data exactly as needed\n  Usually easier to use a vector&lt;vector&lt;T&gt;&gt; in C++ v.s. T[][] as passing 2D arrays with run \ntime sizes into functions is a little awkward\n\n\nThe Idea\n\n\n  We can solve the one dimensional version of this problem in linear time using kadanes algorithm\n  The rows of the 2D array can be flattened into a 1D array by summing them together\n  We can then perform kadanes algorithm on the flattened rows and find the rows bounding the \nmaximum sub sequence\n\n\nIn Action\n\n\n\nIn Action\n\n\n\nIn Action\n\n\n\n\n  etc.\n\n\nIn Action\n\n\n\nOne Dimensional Algorithm\n\n\n  In order to find the row bounds we need to implement the one dimensional maximum sub sequence algorithm\n  Known as Kadane’s algorithm, it goes as follows:\n    \n      Keep track of the sum of the current prefix that we scanned\n      If that prefix ever becomes negative, give up on it and start over\n      After each iteration, compare our current prefix sum with the max seen so far\n  and update accordingly\n    \n  \n\n\nImplementation\n\n\n\nUsing this algorithm\n\n\n  To use this algorithm, we simply need to iterate through the matrix fixing the columns\n  We can then flatten the elements in between our fixed left and right columns into a one dimensional array\n  Once we have our flattened columns, we run the result through kadanes algorithm and recieve the maximum sum \nas well as the bounding rows\n\n\nCombining the two\n\n\n\nThe solution\n\n\n  found here\n\n",
      "excerpt": "View problem\n\n",
      "languages": null,
      "categories": ["potw"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Lets Eat Grandpa",
      "permalink": "http://quinnftw.com/lets-eat-grandpa/",
      "link": "http://quinnftw.com/lets-eat-grandpa/",
      "date": "2015-09-25T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "View Problem\n\nThe Problem\n\nYou are given a dictionary of words, followed by a list of sentences which have been \nstripped of all punctuation.  You are to determine if spaces can be re-inserted into \nthe sentences such that each word created appears in the given dictionary.\n\nThings to consider\n\n\n  Words may overlap\n    \n      i.e. “cat” and “catch”\n      Where you choose to insert the space is important in this case\n      This prevents heuristic greedy algorithms\n    \n  \n  A word may appear more than once in any sentence\n  Test cases are large enough that computing all possible dictionary \ncombinations will eat my CPU\n\n\nThings to consider\n\n\n  The key to this problem is finding all valid word prefixes for a given sentence\n  Since words may overlap, we must explore each one\n\n\nExample\n\n  Dictionary:\n    \n      cat\n      catch\n      cha\n    \n  \n  Sentence:\n    \n      catcha\n    \n  \n  You must consider the case of [catch][a] and [cat][cha]\n\n\nData Representation\n\n\n  Since we will be looking for valid word prefixes, this problem lends itself \nwell to the Trie data structure (also known as a prefix tree)\n  Trie’s are ordered tree data structures which have the property that all \ndescendants of a given node share a common prefix\n  Used commonly for auto-complete and text prediction\n\n\n\n\nImplementation\n\n\n  Like graphs, most languages do not include a trie structure in the \nstandard library\n  Again though, they are easily created using existing data structures\n  Each node in the trie contains a map of a Character =&gt; TrieNode denoting an out \ngoing edge labeled with the character incident on the given TrieNode\n  For the purpose of this problem we only need a minimal trie implementation\n  insert, and prefixMatches are all that are necessary\n  Note that tries can also be used to implement pattern matching i.e.\n    \n      find all strings that start with a, followed by any 3 characters, and \n  end with b\n      These features are used for things like text prediction and auto complete\n    \n  \n\n\nTrie Node Implementation\n\n\n\nInsert Function\n\n\n\nFinding matching prefixes\n\n\n\nPutting it all together\n\n\n  Now that we have a way of finding all valid prefixes, we just have to design \nan algorithm to solve the problem\n  Basically, for each valid prefix we find, we want to remove it from the sentence \nand then repeat the process with the remaining string\n  Once we have exhausted the entire input string, we know that it was a valid sentence\n  Seems like a recursive problem\n\n\nThe algorithm\n\n\n\nFull solution\n\n\n  Found Here\n\n\nQuestions?\n\n",
      "excerpt": "View Problem\n\n",
      "languages": null,
      "categories": ["potw"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Calculating Coolness",
      "permalink": "http://quinnftw.com/calculating-coolness/",
      "link": "http://quinnftw.com/calculating-coolness/",
      "date": "2015-09-20T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "View Problem\n\nThe Problem\n\nGiven a list of friendships, calculate the degrees of separation between each person listed and\nthe coolest guy around Quinn\n\nStep 1: Data Representation\n\n\n  Often the hardest part of solving any problem\n  Very cruicial to the rest of your approach\n  Should be well thought out\n  The more problems you do, the easier this becomes\n\n\nUndirected Graphs\n\n\n  We will represent the data given to us as an undirected graph\n  What is a graph?\n    \n      Not your typical line or bar graph\n      Graphs in math are defined as a 2-tuple (V, E)\n      A set of vertices connected by a set of edges\n    \n  \n  Each person will be a vertex in our graph and each friendship will be an edge\n  Undirected just means that each edge is bidirectional (just like the friendship relation)\n\n\n\n\nStep 2: Choosing an Algorithm\n\n\n  Now that we have decided on a way to represent our data, we must choose an algorithm to process it\n  Since we have decided to use a graph, it would only make sense to consider graph algorithms\n\n\nBreadth First Search\n\n\n  Breadth first search is a commonly used algorithm for traversing graphs\n  Useful for this problem because it traverses the graph in a level order manner\n    \n      It first handles the root (Quinn)\n      Then moves to Quinn’s direct neighbours (QDist level 1)\n      Continuing down until each level has been processed\n    \n  \n\n\nStep 3: Implementation\n\n\n  Now that we have our data structure and algorithm mapped out, we can begin implementing them\n\n\nGraph Implementation\n\n\n  Most languages do not include a graph data structure in the standard library\n  Thankfully they are relatively simple, and most languages do provide the tools nessesary to do so\n  Generally implemented using a map\n  We map verticies to a list of their corresponding adjacent verticies\n\n\nHow I Did it\n\n\n\n\n  Not the only way\n\n\nBreadth First Search and Cycle Detection\n\n\n  Breadth first search is also relatively easy to implement\n  One thing to keep in mind is that cycles may appear in the graph\n  For instance:\n    \n      \n    \n  \n\n\nBreadth First Search and Cycle Detection\n\n\n  To handle this we simply need to make sure we do not visit any vertex more than once\n  Each time a node is visited add it to a set of visited nodes\n  Do not process any node that has already been visited\n\n\nHow I Did It\n\n\n\nPutting it all together\n\n\n  We now have a map that maps each person to their QDist value\n  Basically done at this point, we just need to handle the uncool people\n  Since there does not exist a path in the graph from them to Quinn, they will not appear in the visited map\n  This can be solved many different ways\n  You could store all the names at the very beginning and then check which do not appear in the visited map\n\n\nMy solution\n\n\n  Found Here\n\n\nQuestions?\n\n\n  It’s not too late to try solving this problem\n  Good luck on week 3!\n\n\n",
      "excerpt": "View Problem\n\n",
      "languages": null,
      "categories": ["potw"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Personal API",
      "permalink": "http://quinnftw.com/creating-my-personal-api.html",
      "link": "http://quinnftw.com/creating-my-personal-api.html",
      "date": "2015-08-18T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "Final Product\n\n\n\nI’ve had the idea of creating a personal API rolling around in my head for a\nwhile.  Its a pretty cool concept, and there are a lot of interesting implementation\nand design decisions to be made.  My two main goals for the end product were:\n\n\n\nThe data should be easily accessible and clean\n\nThis was a big one.   I’ve used a lot of poorly designed API’s with nonsensical\nend point names and the need for 18 different check sums to get a single piece of data.\nData cleanliness was also very important, there is no need to have to go through\nan arbitrary number of outer level JSON fields before getting to the actual\n\n\n\nIt should be very easy to add/modify end points\n\nI wanted to design the API as an almost a plugin like system, where adding new modules\n(end points) was very simple and the main driver really doesn’t have to worry about\nindividual implementations.\n\n\n\nBefore starting to write code or making any design decisions, I poked around\na few github repo’s to see how other people were doing things.  One that I\nreally liked and pulled a lot of inspiration from was\nmbmccormick’s personal api.\n\nI decided to go with a Node.js backend because I have recently been fooling around\nwith node and wanted to expand my knowledge a bit.  I had also created an HTTP server in\nnode before and I knew it would be super easy to get up and running.  Since\nI would be using javascript as the server language, it only made sense to serve\nthe data in JSON format.\n\nMaking the API easily extensible was actually not as difficult as I thought it would\nbe.  I made each API module expose a registerRoutes function which defined\nloop through each of the end points and register it with the main server.  I\nimplemented some pretty simple cache logic and a few helper functions for\nsetting the HTTP headers and response content and the API was up and running\nin no time.\n\nI also wrote a janky little python script which parses each module for comments\nand generates an html file with documentation.  This made it\nso that the homepage literally updated it self with each new addition and I\ndidn’t have to worry about forgetting to add to it.\n\nI am very proud of the final product, the code is super clean and very easily testable.  The source code is available on\ngithub, and the api is live at api.quinnftw.com.\n\nIf you have any questions about anything that I did or think you can improve\nmy code, let me know!.\n",
      "excerpt": "Final Product\n\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  

  
    ,
    {
      "title": "Using Angular with Jekyll",
      "permalink": "http://quinnftw.com/using-angular-with-jekyll/",
      "link": "http://quinnftw.com/using-angular-with-jekyll/",
      "date": "2015-07-26T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "Earlier today I decided to try and clean up some of the jquery soup on my \nwebsite by bringing some nice and orgainized angular into the mix. \nFor about 30 minutes I was pulling my \nhair out trying to figure out why my angular expressions weren’t working, until \nI finally realized that angular and liquid markdown share the exact same expression \ndelimiters: {{ and }} (just getting those to show \nin this post took some leg work).  So the liquid markdown parser scans through and \nconsumes all the angular expressions and then when the html is rendered, there is \nnothing for angular to evaluate.\n\nThankfully angular exposes its interpolate provider, so you can easily change \nthe characters to something else which won’t conflict with jekyll, \nlike [[ and ]] for example.\n\n\n\n",
      "excerpt": "Earlier today I decided to try and clean up some of the jquery soup on my \nwebsite by bringing some nice and orgainized angular into the mix. \nFor about 30 minutes I was pulling my \nhair out trying to figure out why my angular expressions weren’t working, until \nI finally realized that angular and liquid markdown share the exact same expression \ndelimiters: {{ and }} (just getting those to show \nin this post took some leg work).  So the liquid markdown parser scans through and \nconsumes all the angular expressions and then when the html is rendered, there is \nnothing for angular to evaluate.\n\n",
      "languages": null,
      "categories": ["misc"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Generic Container Benchmarking",
      "permalink": "http://quinnftw.com/generic-container-benchmarking/",
      "link": "http://quinnftw.com/generic-container-benchmarking/",
      "date": "2015-04-08T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "Final Product\n\n\n\nOne of the things that I have been really into lately is writing my own\nimplementations of the containers provided in the STL.  It helps me better\nunderstand whats going on under the hood and is great practise for writing\ngeneric code.\n\nOne of the things I found myself doing was comparing the performance of my custom\ndata structures to the equivalent standard implementations and seeing\nhow they held up.\nI found myself writing more or less the same code each time I did this, so I\ndecided to try my hand at writing a library to make my life easier.\n\nGoals\n\n\n  \n    Report time to do basic container operations (insert, look up, copy, move, etc.)\naccurately in seconds\n  \n  \n    Be able to compare MOST (I don’t want to say all) containers against each other,\nregardless of different API’s\n  \n  \n    Allow the user a high level of control on how insertions and lookups are done\n  \n\n\nReporting Time\n\nThankfully C++ has an excellent time library which provides a high resolution clock, so this part of the library was much easier than expected.  To record time taken to complete an operation, one simply writes:\n\n\n\nBenchmarking Inserts\n\nThis is the part where things got interesting.  I started with implementing\nmy insertion function.  I wanted to make it so that the same function\ncould be used on all the different container types.  I started to analyze the\nstandard containers and noticed a few patterns:\n\n\n  \n    Sequence containers generally provide both\nvoid push_back(T const&amp;) and\nvoid insert(std::size_t, T const&amp;) functions for adding elements\n  \n  \n    Associative and ordered containers only use\niterator insert(std::pair&lt;key_type, value_type&gt; const&amp;) for inserting, and\ndo not provide a push_back function\n  \n  \n    Limited access containers use void push(T const&amp;)\n  \n\n\nThe problem now was to figure out a way to integrate all 3 of these different\ninsertion methods into a single (as far as the user is concerned) function.\n\nI have recently started to learn about template metaprogramming, so I\nknew that some member detecting would be useful for figuring this out.\n\nBased on my observations I came up with 3 different member dectors, one for push_back, one for insert, and one for push.  Now I could use these member dectors \nalong with std::enable_if to choose the right overload of insert for each container type.\n\n\n  \n    If the container has a push_back function, then treat it as a seqeunce container\n  \n  \n    If the container has a insert function and does not have a push_back function, treat it as associative.  The check for push_back is nessesary because\nsequence containers also provide an insert function, therefore only checking for \nthe presence of an insert function would lead to an ambiguous call.\n  \n  \n    If the container has a push function, treat it as limited access\n  \n\n\nNow, where should the inserted values be coming from?  I decided to allow the \nuser to provide a callable object which takes no arguments that would provide \nthe values to be inserted.  I believe this allows for the highest level of control, as the user could provide a stateless function, or some kind of stateful functor.\n\nBenchmarking Look ups\n\nBenchmarking lookups turned out to be alot easier than insertions as there \nwas only 2 different possibilites for each container:\n\n\n  \n    An iterator find(T const&amp;) function existed\n  \n  \n    No find function existed\n  \n\n\nI wrote up another quick member dector for a find function, and defined an \nerror case for containers which did not provide one.   This makes it so that no \ncompile time error will occur, and other benchmarks can continue on as expected.\n\nI breifly considered using std::find() in the case where a find \nmember function was not found but iterators for the container existed.  I decided \nagainst this because generally these types of contianers are not designed \nfor rapid successive look ups.\n\nAgain, I allowed the user to provide a no argument callable object from which \nthe look up elements would be generated.\n\nBenchmarking Iteration\n\nIteration proved to be easy as well, as it followed the same pattern as look \nup functions. either:\n\n\n  \n    begin() and end() functions exist\n  \n  \n    begin() and end() functions do not exist\n  \n\n\nI came up with a few more member dectectors, defined an error case \nand just recorded to time it took to for-range loop through each element \nin the container\n\nBenchmarking copy and move constructors was very trivial and not worth \nthe explanation.\n\nsee auto copy = c and auto m = std::move(c)\n\nWrapping Up\n\nI provided a utility function which performs the benchmarks on two different \nprovided containers and outputs the results in a nice colored format.\n\nIf you are interested, the code for this can be found on github, and I welcome criticism with open arms.\n",
      "excerpt": "Final Product\n\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  

  
    ,
    {
      "title": "Deploying django on a shared host",
      "permalink": "http://quinnftw.com/deploying-django-on-a-shared-host/",
      "link": "http://quinnftw.com/deploying-django-on-a-shared-host/",
      "date": "2015-03-07T00:00:00-05:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "I finally decided to suck it up and rewrite linkwallet in django.  I got sick of trying to maintain the messy PHP code that I had written and hacked onto over the years.\n\nIt took me about a month of on and off work, but it was finally ready to be pushed to production.  Now I have expirience with pushing rails to production using heroku, but never have I pushed django to production.  On top of that, I wanted to push it to my shared host (bluehost) as I have already paid for 3 years of hosting (I know), and am pretty happy with their speeds and features (ssh access, unlimited emails, etc.).  It wasn’t really as easy as I had hoped it would be so I figured it\nwould be helpful for me, and maybe others, if I documented the process and outlined the mistakes I made.\n\n\n\nStep 1 - Install Python\nThe first thing I had to do was get python installed on my shared host.  Thankfully bluehost offers ssh access, so doing this was pretty straight forward.  One mistake I made which I payed for later on was that I installed a different version of python on the server than on my local machine.\n\nDont do this\n\nInitially I installed python 2.7.5, whereas my local environment was running 2.7.7.  I ran into an issue with the hmac.compare_digest function which caused numerous 500 errors which were not fun to track down.\n\nTo install python on your shared host, ssh into the server and from the home directory run the following commands:\n\nmkdir src\ncd src\nwget http://www.python.org/ftp/python/&lt;version&gt;/Python-&lt;version&gt;.tgz\ntar -xzvf Python-&lt;version&gt;.tgz\ncd Python-&lt;version&gt;\n./configure --prefix=$HOME/python\nmake\nmake install\n\nWhere you would replace &lt;version&gt; with the version of python you are using.\n\nStep 1.1 - Update your path\n\nNow you have to update your $PATH so that when you run the python command, it uses your python instead of the system installed one.  To do this simply run vim ~/.bashrc (vim optional, use whatever text editor you want) and add the line export PATH=$HOME/python/bin/:$PATH.  This makes it so that python will resolve to your version instead of the system one.\n\n\n\nStep 2 - Install Django\n\nThe easiest way to install Django and all its dependancies is through pip.  To install pip, run the following commands from your src directory:\n\nwget https://bootstrap.pypa.io/get-pip.py\npython get-pip.py\n\nNow we can use pip to install django with:\n\npip install django\n\nThere is one other thing that we need to run django through fastcgi called flup.  This can also be installed through pip with:\n\npip install flup\n\n\n\nStep 3 - Transferring files\n\nThis step can be done many different ways, so I will leave this one up to you.  Basically you need to get your django project files from your local machine to the server.\nI prefer to store them somewhere in the home directory, but its really up to.\n\n\n\nStep 4 - Route requests through your django app\n\nNow that your project is on the server, you need to route your requests through it somehow.\nChange directories into the root of your website (where you would normally store index.html, etc.), and create a file called &lt;yoursite&gt;.fcgi (obviously replacing &lt;yoursite&gt; with the name of your site) and add the following:\n\n#! /home/&lt;yourusername&gt;/python/bin/python\n\nimport sys\nimport os\n\nsys.path.insert(0, \"/home/&lt;yourusername&gt;/python/lib/python2.7/site-packages\")\nsys.path.append(\"&lt;full path to your django project&gt;\")\n\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \"&lt;your project name&gt;.settings\"\n\nfrom django.core.servers.fastcgi import runfastcgi\nrunfastcgi(method=\"threaded\", daemonize=\"false\")\n\nAgain, filling in your information.\n\nchmod this file so that it can be executed:\n\nchmod 0755 &lt;yoursite&gt;.fcgi\n\nAnd now running ./&lt;yoursite&gt;.fcgi should output the html code of your index page to the screen.\n\nIn order to route http requests to this script, you need to create a .htaccess file in your website route (same directory as the fcgi file) which contains the following:\n\nAddHandler fcgid-script .fcgi\nRewriteEngine On\nRewriteCond %{HTTP_HOST} ^(.+\\.|)&lt;your site url&gt;.com\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ &lt;yoursite&gt;.fcgi/$1 [QSA,L]\n\n\n\nThats it\n\nIf you did everything right, you should be able to load yoursite.com and see your newly created django site in action.\nNow go turn debug to false and fix the other 800 errors that pushing to production caused ;)\n",
      "excerpt": "I finally decided to suck it up and rewrite linkwallet in django.  I got sick of trying to maintain the messy PHP code that I had written and hacked onto over the years.\n\n",
      "languages": null,
      "categories": ["misc"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Efficient Bank Queues",
      "permalink": "http://quinnftw.com/efficient-bank-queues/",
      "link": "http://quinnftw.com/efficient-bank-queues/",
      "date": "2015-02-06T00:00:00-05:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "\n\nOne of my friends who is taking a data structures class recently came to me for help with an interesting problem.  A formal description of which can be found here (see part C).\n\nBasically, you are asked to simulate two different styles of queues in a public place (for the purpose of this post I will be referring to a bank), and indicate which style results in a shorter mean wait time.\n\nSeries Queueing\nEach teller has his/her own queue.  When a customer arrives, they will enter  the shortest queue in terms of people in the queue.  Once a customer has chosen a queue, they will not change queues (renege), or decide to leave before they have been served (balk).\n\nParallel Queuing\nAll tellers share a common queue, and serve the next customer once they become available.\n\nThe first time I read this question, I expected series queueing to be the better option, as it results in n queues moving concurrently.  After having researched a bit on queue theory (which I didn’t know existed before having seen this problem) I learned that parallel is in fact better.\n\nThe reason why this is the case is because with series queueing, a single slow customer will cause his/her entire line longer wait times.  Whereas with parallel queueing, one teller can help that slow customer while the rest of the customers flow to the other available tellers.\n\nIn more precise terms, the wait time for a customer in series queueing can be calculated as  where   As you can see, if any one customer has a large wait time it increases the wait time of each customer behind them.  The relation is very linear.\n\nIn contrast, parallel queuing produces an n-ary tree structure (where n is the number of tellers).  When a customer is at the front of the queue, they must only wait .  Hence a customers wait time only depends on the minimum wait time of the customers in front of them, instead of the summation.\n\nParallel queuing is also a better option from a psychological stand point.  Since there is only one line, it removes the frustration of a customer choosing the “slower” line.  A frustrated customer is more likely to take longer to be served than a non-frustrated customer.  Also, in a real life situation a person would not take the time to count the number of people in each queue and choose the shortest one.  Un-optimal choices would result in even more frustration and longer wait\ntimes. Parallel queuing eliminates the need to make optimal choices, as their is only one option.\n\nReal life applications\n\nWhy is it then that many commercial places uses series queuing instead of parallel queueing?  Lack of knowledge aside, series queueing is much more space efficient.  A popular application of series queueing is in toll booths on busy bridges.  Hundreds of cars are able to fit in a relatively small plaza in multiple lines, whereas if there was only one line, some kind of zig-zag or spiral formation would be needed.  With these kind of formations issues arise.  Most people are not\ncapable of forming a single line without the need of a physical barrier, so one must be built.  But now consider the situation where a car breaks down, how do the cars behind it continue on through the queue?  The barrier must be made wide enough to fit two cars.  Surely people will take advantage of this and attempt to cut others in line, creating another issue.\n\nIn a vacuum parallel queueing is the better option, but there are many situations where it is just not plausible.\n\nSimulation\n\nI wrote up a quick C++ program which simulates these two queuing styles and shows the mean wait times.  I found that when the variance on  was small, the difference in mean wait time was negligible.  When as I increased this variance it was apparent that parallel queuing was the more efficient option.  The source code to that program can be found here\n\n",
      "excerpt": "\n\n",
      "languages": null,
      "categories": ["misc"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "PyTools",
      "permalink": "http://quinnftw.com/pytools.html",
      "link": "http://quinnftw.com/pytools.html",
      "date": "2014-03-12T00:00:00-04:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "\n",
      "excerpt": "\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  

  
    ,
    {
      "title": "Linkwallet",
      "permalink": "http://quinnftw.com/linkwallet.html",
      "link": "http://quinnftw.com/linkwallet.html",
      "date": "2014-02-12T00:00:00-05:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "\n",
      "excerpt": "\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  

  
    ,
    {
      "title": "Github - everything else",
      "permalink": "http://quinnftw.com/github.html",
      "link": "http://quinnftw.com/github.html",
      "date": "2013-02-12T00:00:00-05:00",
      
        "modified": "2016-02-13T15:14:22-05:00",
      
      "author": {
        "name": "Quinn Perfetto",
        "url": "http://quinnftw.com",
        "email": "thequinnftw@gmail.com"
      },
      "content": "\n",
      "excerpt": "\n",
      "languages": null,
      "categories": [],
      "tags": ["project"]
    }
    
  


]
